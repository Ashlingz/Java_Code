/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package managment;

import com.mysql.jdbc.PreparedStatement;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author TUF
 */
public class SaleData extends javax.swing.JFrame {

    /**
     * Creates new form SaleData
     */
    public SaleData() {
        initComponents();
        display();
        display1();
        ProductComboBox();
        
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        JTableHeader header = table.getTableHeader();
        header.setFont(new Font("Khmer OS Freehand", Font.BOLD, 16));
        
        JTableHeader header1 = table1.getTableHeader();
        header1.setFont(new Font("Khmer OS Freehand", Font.BOLD, 16));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        txtProduct = new javax.swing.JComboBox<>();
        btnQuery = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCurrency = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(241, 241, 241));
        jPanel1.setForeground(new java.awt.Color(204, 204, 204));

        table.setBackground(new java.awt.Color(255, 255, 255));
        table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        table.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        table.setForeground(new java.awt.Color(102, 102, 102));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "ផលផលិត", "ចំនួន", "តម្លៃ", "សរុប", "ថ្ងៃលក់"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setGridColor(new java.awt.Color(102, 102, 102));
        table.setIntercellSpacing(new java.awt.Dimension(5, 5));
        table.setRowHeight(45);
        table.setShowGrid(true);
        table.setShowVerticalLines(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(15);
            table.getColumnModel().getColumn(1).setPreferredWidth(120);
            table.getColumnModel().getColumn(2).setPreferredWidth(25);
        }

        txtProduct.setBackground(new java.awt.Color(255, 255, 255));
        txtProduct.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        txtProduct.setForeground(new java.awt.Color(102, 102, 102));
        txtProduct.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        txtProduct.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductActionPerformed(evt);
            }
        });

        btnQuery.setBackground(new java.awt.Color(0, 153, 255));
        btnQuery.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        btnQuery.setForeground(new java.awt.Color(255, 255, 255));
        btnQuery.setText("បញ្ជូន");
        btnQuery.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueryActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("ដល់ថ្ងៃ");

        jLabel3.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("រូបិយប័ណ្ណ");

        txtCurrency.setBackground(new java.awt.Color(255, 255, 255));
        txtCurrency.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        txtCurrency.setForeground(new java.awt.Color(102, 102, 102));
        txtCurrency.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "រៀល", "ដុល្លារ 4000", "ដុល្លារ 4100", "ដុល្លារ 4200", " " }));
        txtCurrency.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel1.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("សរុបផលិតផលនីមួយៗ");

        table1.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        table1.setForeground(new java.awt.Color(102, 102, 102));
        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ផលិតផល", "ចំនួន", "តម្លៃសរុប"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table1.setGridColor(new java.awt.Color(102, 102, 102));
        table1.setIntercellSpacing(new java.awt.Dimension(5, 5));
        table1.setRowHeight(45);
        table1.setSelectionBackground(new java.awt.Color(255, 204, 204));
        table1.setShowGrid(true);
        table1.setShowVerticalLines(false);
        jScrollPane2.setViewportView(table1);
        if (table1.getColumnModel().getColumnCount() > 0) {
            table1.getColumnModel().getColumn(0).setPreferredWidth(120);
            table1.getColumnModel().getColumn(1).setPreferredWidth(30);
        }

        jLabel5.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("ផលិតផល");

        jLabel6.setFont(new java.awt.Font("Khmer OS Freehand", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("ចាប់ពីថ្ងៃ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtProduct, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCurrency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
                .addGap(9, 9, 9))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addComponent(txtProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addGap(23, 23, 23))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueryActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        Object[] row = new Object[6];
        model.setRowCount(0);
        
        DefaultTableModel model1 = (DefaultTableModel) table1.getModel();
        Object[] row1 = new Object[3];
        model1.setRowCount(0);
        
        Connection con = null;
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/manegment?autoReconnect=true&useSSL=false","root","");
            
            String product = txtProduct.getSelectedItem().toString();
            SimpleDateFormat fdate = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = "";
            String toDate = "";

            if (dateFrom.getDate() == null && dateTo.getDate() == null) {
            fromDate = "2023-01-01";
            toDate = "9000-01-01";
            }else if(dateTo.getDate() == null){
                fromDate = fdate.format(dateFrom.getDate());
                toDate = fdate.format(dateFrom.getDate());
            }else{
                fromDate = fdate.format(dateFrom.getDate());
                toDate = fdate.format(dateTo.getDate());
            }
            
            
            //Execute
            String product_query = "";
            if(txtProduct.getSelectedItem() == "-"){
                product_query = "SELECT * FROM sales WHERE sale_date BETWEEN DATE_FORMAT(?, '%Y-%m-%d') AND DATE_FORMAT(?, '%Y-%m-%d')";
            }else if(txtProduct.getSelectedItem() == "-"){
                product_query = "SELECT * FROM sales";
            }
            else{
                product_query = "SELECT * FROM sales WHERE sale_date BETWEEN DATE_FORMAT(?, '%Y-%m-%d') AND DATE_FORMAT(?, '%Y-%m-%d') AND product_name = ?"; 
            }
            String sql = product_query;
            PreparedStatement statement = (PreparedStatement) con.prepareStatement(sql);

            if(txtProduct.getSelectedItem() == "-"){
                statement.setString(1, fromDate);
                statement.setString(2, toDate);
            }
            else{
                statement.setString(1, fromDate);
                statement.setString(2, toDate);
                statement.setString(3, product);
            }
            
            //Currency Convert
            double rate = 0;
            if(txtCurrency.getSelectedItem() == "ដុល្លារ 4000"){
                rate = 4000;
            }else if(txtCurrency.getSelectedItem() == "ដុល្លារ 4100"){
                rate = 4100;
            }else if(txtCurrency.getSelectedItem() == "ដុល្លារ 4200"){
                rate = 4200;
            }else{
                rate = 1;
            }
            
            //Currency Symbol 
            String symbol = "";
            if(txtCurrency.getSelectedItem() == "រៀល"){
                symbol = " ៛";
            }else{
                symbol = " $";
            }
            
            //HashMap
            Map<String, Integer> productQtyMap = new HashMap<>();
            Map<String, Double> productTotalMap = new HashMap<>();
            
            //Price
            DecimalFormat decimalPrice = new DecimalFormat("#0");;
            
            //Double Length Convert
            DecimalFormat decimalFormat;
            if(txtCurrency.getSelectedItem() == "រៀល"){
                decimalFormat = new DecimalFormat("#0");
            }else{
                decimalFormat = new DecimalFormat("#0.00");
            }
            
            //Executing Display
            ResultSet rs = statement.executeQuery();
            while(rs.next()) {
                
                double currency = rs.getDouble("total");
                double convert = currency / rate;
                
                row[0] = rs.getObject("id_sale"); 
                row[1] = rs.getObject("product_name");
                row[2] = rs.getObject("qty"); 
                row[3] = decimalPrice.format(rs.getDouble("price")) + " ៛";
                row[4] = decimalFormat.format(convert) + symbol;
                row[5] = rs.getObject("sale_date"); 
                model.addRow(row);
                
                //Table1 Sum in Each Product_Name
                String productName = rs.getString("product_name");
                int qty = rs.getInt("qty");
                double total = rs.getDouble("total");

                productQtyMap.put(productName, productQtyMap.getOrDefault(productName, 0) + qty);
                productTotalMap.put(productName, productTotalMap.getOrDefault(productName, 0.0) + total / rate);
            }

            // Update model1 with sums
            for (Map.Entry<String, Integer> entry : productQtyMap.entrySet()) {
                row1[0] = entry.getKey();
                row1[1] = entry.getValue();
                row1[2] = decimalFormat.format(productTotalMap.get(entry.getKey())) + symbol;
                model1.addRow(row1);
            }
        
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_btnQueryActionPerformed

    private void txtProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductActionPerformed
        // TODO add your handling code here:  
    }//GEN-LAST:event_txtProductActionPerformed

    public void display() {
        Connection con = null;

        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/manegment?autoReconnect=true&useSSL=false", "root", "");

            String qry = "SELECT * FROM sales";
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(qry);

            DefaultTableModel model = (DefaultTableModel) table.getModel();
            Object[] row = new Object[6];
            
            

            DecimalFormat decimalFormat = new DecimalFormat("#0");
            

            while (rs.next()) {
                row[0] = rs.getObject("id_sale");
                row[1] = rs.getObject("product_name");
                row[2] = rs.getObject("qty");
                row[3] = decimalFormat.format(rs.getDouble("price")) + " ៛";
                row[4] = decimalFormat.format(rs.getDouble("total")) + " ៛";
                row[5] = rs.getObject("sale_date");

                model.addRow(row);

            }
            

        } catch (ClassNotFoundException ex) {
            ex.getMessage();
        } catch (SQLException ex) {
            ex.getMessage();
        } catch (Exception ex) {
            ex.getMessage();
        }
    }
    public void display1() {
    Connection con = null;

    try {
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/manegment?autoReconnect=true&useSSL=false", "root", "");

        String qry = "SELECT * FROM sales";
        Statement st = con.createStatement();
        ResultSet rs = st.executeQuery(qry);

        DefaultTableModel model = (DefaultTableModel) table1.getModel();
        Object[] row = new Object[3];

        DecimalFormat decimalFormat = new DecimalFormat("#0");
        
        // HashMap to store cumulative totals and quantities for each product name
        HashMap<String, Double> productTotals = new HashMap<>();
        HashMap<String, Integer> productQuantities = new HashMap<>();

        while (rs.next()) {
            String productName = rs.getString("product_name");
            double total = rs.getDouble("total");
            int quantity = rs.getInt("qty");

            // Update cumulative totals
            if (productTotals.containsKey(productName)) {
                double cumulativeTotal = productTotals.get(productName) + total;
                productTotals.put(productName, cumulativeTotal);
            } else {
                productTotals.put(productName, total);
            }

            // Update cumulative quantities
            if (productQuantities.containsKey(productName)) {
                int cumulativeQuantity = productQuantities.get(productName) + quantity;
                productQuantities.put(productName, cumulativeQuantity);
            } else {
                productQuantities.put(productName, quantity);
            }
        }

        // Iterate over the HashMap and add rows to the table model
        for (Map.Entry<String, Double> entry : productTotals.entrySet()) {
            String productName = entry.getKey();
            double total = entry.getValue();
            int quantity = productQuantities.get(productName);

            row[0] = productName;
            row[1] = quantity;
            row[2] = decimalFormat.format(total) + " ៛";

            model.addRow(row);
        }

    } catch (ClassNotFoundException ex) {
        ex.printStackTrace();
    } catch (SQLException ex) {
        ex.printStackTrace();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
    public void ProductComboBox(){
        Connection con = null;
        
        try{
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/manegment?autoReconnect=true&useSSL=false","root","");
            
            String query = "SELECT * FROM product";
            PreparedStatement statement1 = (PreparedStatement) con.prepareStatement(query);
            ResultSet rs = statement1.executeQuery();
            while(rs.next()) {
                String productName = rs.getString("product_name");
                txtProduct.addItem(productName);
            }
            
            
            }catch(ClassNotFoundException ex){
                ex.getMessage();
            }catch (SQLException ex){
                ex.getMessage();
            }catch(Exception ex){
                ex.getMessage();
            }
    }

   
    
    
   




    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaleData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaleData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaleData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaleData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SaleData().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnQuery;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    private javax.swing.JTable table1;
    private javax.swing.JComboBox<String> txtCurrency;
    private javax.swing.JComboBox<String> txtProduct;
    // End of variables declaration//GEN-END:variables
}
